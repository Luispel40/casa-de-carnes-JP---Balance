generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  accounts       Account[]
  sessions       Session[]
  
  // üëá Novos relacionamentos
  categories     Category[]
  posts          Post[]
  employees      Employee[]
}

// ========================================
// üîí NextAuth Models
// ========================================

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? 
  access_token      String? 
  expires_at        Int? 
  token_type        String? 
  scope             String? 
  id_token          String? 
  session_state     String? 
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ========================================
// üì¶ Conte√∫do e Estrutura do App
// ========================================

// üîπ Categoria criada por um User
model Category {
  id        String   @id @default(cuid())
  name      String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  posts     Post[]   // rela√ß√£o 1:N ‚Äî uma categoria pode ter v√°rios posts
  createdAt DateTime @default(now())
}

// üîπ Post vinculado a um User e a uma Categoria
model Post {
  id          String   @id @default(cuid())
  title       String
  weight      Float    // ‚Äúpeso‚Äù do item/post
  price       Float    // valor em R$
  createdAt   DateTime @default(now())
  
  userId      String
  categoryId  String

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

// üîπ Funcion√°rio (Employee)
model Employee {
  id          String   @id @default(cuid())
  name        String
  role        String   // fun√ß√£o / cargo
  salary      Float
  age         Int
  createdAt   DateTime @default(now())
  
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // üëá Permiss√µes flex√≠veis, em formato JSON
  permissions Json?
}

