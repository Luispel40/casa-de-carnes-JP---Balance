generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DATABASE_URL")
}

model User {
  id             String     @id @default(cuid())
  name           String?
  email          String?    @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  address        String?
  enteprise      String?
  phone          String?
  accounts       Account[]
  categories     Category[]
  employees      Employee[]
  posts          Post[]
  sessions       Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id        String   @id @default(cuid())
  name      String
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  posts     Post[]
}

model Post {
  id         String   @id @default(cuid())
  title      String
  weight     Float
  price      Float
  sellPrice  Float?
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  userId     String
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Employee {
  id          String   @id @default(cuid())
  name        String
  role        String
  salary      Float
  age         Int
  createdAt   DateTime @default(now())
  userId      String
  permissions Json?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
